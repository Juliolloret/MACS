import json
from typing import Optional
from cache import Cache


class FakeLLM:
    """Minimal in-memory LLM used for testing."""

    def __init__(self, app_config=None, response_map=None, cache: Optional[Cache] = None):
        """Create a fake client with optional canned responses."""
        self.app_config = app_config
        self.client = self
        self.response_map = response_map or {}
        self._embedding_client = self
        self._cache = cache or Cache()

    def get_response(self, system_message, user_message, model, temperature):
        """Return a deterministic response for ``user_message``."""
        if user_message in self.response_map:
            return self.response_map[user_message]
        if "generate hypotheses" in user_message.lower() or "propose" in user_message.lower():
            return json.dumps({
                "key_opportunities": "This is a fake opportunity generated for testing by FakeLLM.",
                "hypotheses": [
                    {
                        "hypothesis": "This is a fake test hypothesis generated by FakeLLM.",
                        "justification": "This hypothesis is designed for testing the application.",
                    }
                ]
            })
        return f"[FAKE] ok"

    def complete(self, system, prompt, model, temperature=0.1):
        """Simulate a completion call with simple caching."""
        key = self._cache.make_key(model, system, prompt, temperature)
        cached = self._cache.get(key)
        if cached is not None:
            return cached
        result = self.get_response(system, prompt, model, temperature)
        self._cache.set(key, result)
        return result

    def get_embeddings_client(self):
        """Return a dummy embeddings client (self)."""
        return self._embedding_client

    def embeddings(self, input, model):
        """Return a dummy embedding structure."""
        return self

    def create(self, input, model):
        """Return a dummy embedding structure."""
        return self

    @property
    def data(self):
        """Fake attribute mimicking the OpenAI embeddings response payload."""
        return [self]

    @property
    def embedding(self):
        """Return a constant embedding vector."""
        return [[0.1, 0.2, 0.3]]

    def close(self) -> None:
        """No-op close method for API compatibility."""
        return None
